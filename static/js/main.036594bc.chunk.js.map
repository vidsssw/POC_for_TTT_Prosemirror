{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","Plugin","require","Decoration","DecorationSet","Schema","DOMParser","EditorState","NodeSelection","EditorView","schema","nodes","exampleSetup","resizableImage","inline","attrs","src","width","default","alt","title","alignment","group","draggable","parseDOM","priority","tag","getAttrs","dom","getAttribute","toDOM","node","style","FootnoteView","view","getPos","outer","document","createElement","position","display","lineHeight","marginLeft","marginRight","img","setAttribute","handle","bottom","right","height","border","borderTop","borderLeft","cursor","onmousedown","e","preventDefault","startX","pageX","fontSize","pageY","parseFloat","getComputedStyle","startWidth","onMouseMove","currentX","diffInEm","addEventListener","onMouseUp","removeEventListener","saveThisPos","transaction","state","tr","setNodeMarkup","resolvedPos","doc","resolve","nodeSelection","setSelection","dispatch","appendChild","this","classList","add","remove","placeholderPlugin","init","empty","apply","set","map","mapping","action","getMeta","console","log","widget","deco","pos","id","find","spec","props","decorations","getState","querySelector","selection","$from","parent","inlineContent","target","files","length","file","deleteSelection","setMeta","from","reader","FileReader","Promise","accept","fail","onload","result","onerror","error","setTimeout","readAsDataURL","uploadFile","then","url","found","findPlaceholder","mySchema","replaceWith","create","startImageUpload","focus","value","marks","fromSchema","parse","plugins","concat","nodeViews","applyDevTools","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"+JAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,SCfCC,EAAUC,EAAQ,GAAlBD,O,EAC6BC,EAAQ,IAArCC,E,EAAAA,WAAYC,E,EAAAA,c,EAEQF,EAAQ,GAA5BG,E,EAAAA,OAAOC,E,EAAAA,U,EACsBJ,EAAQ,GAArCK,E,EAAAA,YAAYC,E,EAAAA,cACZC,EAAcP,EAAQ,IAAtBO,W,EACgBP,EAAQ,KAAxBQ,E,EAAAA,OAAOC,E,EAAAA,MACPC,EAAgBV,EAAQ,KAAxBU,aAEDC,EAAiB,CACrBC,QAAQ,EACRC,MAAO,CACLC,IAAK,GACLC,MAAO,CAACC,QAAS,OACjBC,IAAK,CAACD,QAAS,MACfE,MAAO,CAACF,QAAS,MACjBG,UAAW,CAAEH,QAAS,WAExBI,MAAO,SACPC,WAAW,EACXC,SAAU,CAAC,CACTC,SAAU,GACVC,IAAK,kBACLC,SAHS,SAGAC,GACP,MAAO,CACLZ,IAAKY,EAAIC,aAAa,OACtBT,MAAOQ,EAAIC,aAAa,SACxBV,IAAKS,EAAIC,aAAa,OACtBZ,MAAOW,EAAIC,aAAa,SACxBR,UAAuC,WAA5BO,EAAIC,aAAa,SAAsB,SAAwC,UAA5BD,EAAIC,aAAa,SAAqB,QAAU,WAKpHC,MAzBqB,SAyBfC,GACJ,IAAMhB,EAAQ,CAACiB,MAAM,UAAD,OAAYD,EAAKhB,MAAME,QAC3C,MAAO,CAAC,MAAD,2BAAac,EAAKhB,OAAUA,M,IAQjCkB,E,WACJ,WAAYF,EAAMG,EAAMC,GAAS,oBAC/B,IAAMC,EAAQC,SAASC,cAAc,OACrCF,EAAMJ,MAAMO,SAAW,WACvBH,EAAMJ,MAAMf,MAAQc,EAAKhB,MAAME,MAE/BmB,EAAMJ,MAAMQ,QAAU,QAEtBJ,EAAMJ,MAAMS,WAAa,IACzBL,EAAMJ,MAAMU,WAAW,OACvBN,EAAMJ,MAAMW,YAAY,OACxB,IAAMC,EAAMP,SAASC,cAAc,OACnCM,EAAIC,aAAa,MAAOd,EAAKhB,MAAMC,KACnC4B,EAAIZ,MAAMf,MAAQ,OAGlB,IAAM6B,EAAST,SAASC,cAAc,QACtCQ,EAAOd,MAAMO,SAAW,WACxBO,EAAOd,MAAMe,OAAS,MACtBD,EAAOd,MAAMgB,MAAQ,MACrBF,EAAOd,MAAMf,MAAQ,OACrB6B,EAAOd,MAAMiB,OAAS,OACtBH,EAAOd,MAAMkB,OAAS,kBACtBJ,EAAOd,MAAMmB,UAAY,OACzBL,EAAOd,MAAMoB,WAAa,OAC1BN,EAAOd,MAAMQ,QAAU,OACvBM,EAAOd,MAAMqB,OAAS,cAEtBP,EAAOQ,YAAc,SAASC,GAC5BA,EAAEC,iBAEF,IAAMC,EAASF,EAAEG,MAGXC,GAFSJ,EAAEK,MAnCdC,WAAWC,iBAqCe1B,GArCWuB,WAuClCI,EAAaF,WAAW9B,EAAKhB,MAAME,MAAMjB,MAAM,UAAU,IAEzDgE,EAAc,SAACT,GACnB,IAAMU,EAAWV,EAAEG,MAIbQ,GAHWX,EAAEK,OAEFK,EAAWR,GACAE,GAE5BvB,EAAMJ,MAAMf,MAAZ,UAAuB8C,EAAaG,EAApC,OAkBF7B,SAAS8B,iBAAiB,YAAaH,GACvC3B,SAAS8B,iBAAiB,WAfR,SAAZC,EAAab,GAEjBA,EAAEC,iBAEFnB,SAASgC,oBAAoB,YAAaL,GAC1C3B,SAASgC,oBAAoB,UAAWD,GACxC,IAAIE,EAAcnC,IACdoC,EAAcrC,EAAKsC,MAAMC,GAAGC,cAAcvC,IAAU,KAAM,CAACnB,IAAKe,EAAKhB,MAAMC,IAAKC,MAAOmB,EAAMJ,MAAMf,QACnG0D,EAAcJ,EAAYK,IAAIC,QAAQP,GACtCQ,EAAgB,IAAItE,EAAcmE,GACtCJ,EAAcA,EAAYQ,aAAaD,GACvC5C,EAAK8C,SAAST,OAOlBnC,EAAM6C,YAAYnC,GAClBV,EAAM6C,YAAYrC,GAElBsC,KAAKtD,IAAMQ,EACX8C,KAAKtC,IAAMA,EACXsC,KAAKpC,OAASA,E,yDAIdoC,KAAKtC,IAAIuC,UAAUC,IAAI,4BAEvBF,KAAKpC,OAAOd,MAAMQ,QAAU,K,qCAI5B0C,KAAKtC,IAAIuC,UAAUE,OAAO,4BAE1BH,KAAKpC,OAAOd,MAAMQ,QAAU,W,KAK5B8C,EAAoB,IAAIrF,EAAO,CACjCuE,MAAO,CACLe,KADK,WACI,OAAOnF,EAAcoF,OAC9BC,MAFK,SAEChB,EAAIiB,GAERA,EAAMA,EAAIC,IAAIlB,EAAGmB,QAASnB,EAAGG,KAE7B,IAAIiB,EAASpB,EAAGqB,QAAQZ,MAExB,GADAa,QAAQC,IAAI,MAAMH,GACdA,GAAUA,EAAOT,IAAK,CACxB,IAAIa,EAAS5D,SAASC,cAAc,eAChC4D,EAAO/F,EAAW8F,OAAOJ,EAAOT,IAAIe,IAAKF,EAAQ,CAACG,GAAIP,EAAOT,IAAIgB,KACrEV,EAAMA,EAAIN,IAAIX,EAAGG,IAAK,CAACsB,SACdL,GAAUA,EAAOR,SAC1BK,EAAMA,EAAIL,OAAOK,EAAIW,KAAK,KAAM,MACN,SAAAC,GAAI,OAAIA,EAAKF,IAAMP,EAAOR,OAAOe,QAE7D,OAAOV,IAGXa,MAAO,CACLC,YADK,SACOhC,GAAS,OAAOU,KAAKuB,SAASjC,OAW9CnC,SAASqE,cAAc,iBAAiBvC,iBAAiB,UAAU,SAAAZ,GAC7DrB,EAAKsC,MAAMmC,UAAUC,MAAMC,OAAOC,eAAiBvD,EAAEwD,OAAOC,MAAMC,QAYxE,SAA0B/E,EAAMgF,GAE9B,IAAId,EAAK,GAGL3B,EAAKvC,EAAKsC,MAAMC,GAEfA,EAAGkC,UAAUnB,OAAOf,EAAG0C,kBAC5B1C,EAAG2C,QAAQ9B,EAAmB,CAACF,IAAK,CAACgB,KAAID,IAAK1B,EAAGkC,UAAUU,QAC3DnF,EAAK8C,SAASP,GAsBhB,SAAoByC,GAClB,IAAII,EAAS,IAAIC,WACjB,OAAO,IAAIC,SAAQ,SAACC,EAAQC,GAC1BJ,EAAOK,OAAS,kBAAMF,EAAOH,EAAOM,SACpCN,EAAOO,QAAU,kBAAMH,EAAKJ,EAAOQ,QAEnCC,YAAW,kBAAMT,EAAOU,cAAcd,KAAO,SA1B/Ce,CAAWf,GAAMgB,MAAK,SAAAC,GACpB,IAAIhC,EAhCR,SAAyB3B,EAAO4B,GAC9B,IACIgC,EADQ9C,EAAkBmB,SAASjC,GACrB6B,KAAK,KAAM,MAAM,SAAAC,GAAI,OAAIA,EAAKF,IAAMA,KACtD,OAAOgC,EAAMnB,OAASmB,EAAM,GAAGf,KAAO,KA6B1BgB,CAAgBnG,EAAKsC,MAAO4B,GAG3B,MAAPD,IAGJJ,QAAQC,IAAIsC,EAAS3H,MAAM,SAC3BuB,EAAK8C,SAAS9C,EAAKsC,MAAMC,GACV8D,YAAYpC,EAAKA,EAAKmC,EAAS3H,MAAME,eAAe2H,OAAO,CAACxH,IAAK,0MACjEoG,QAAQ9B,EAAmB,CAACD,OAAQ,CAACe,aACnD,WAEDlE,EAAK8C,SAASP,EAAG2C,QAAQ9B,EAAmB,CAACD,OAAQ,CAACe,YAnCtDqC,CAAiBvG,EAAMqB,EAAEwD,OAAOC,MAAM,IACxC9E,EAAKwG,WAGPrG,SAASqE,cAAc,iBAAiBvC,iBAAiB,SAAQ,SAAAZ,GAAC,OAAEA,EAAEwD,OAAO4B,MAAM,MAEnF,IAAML,EAAW,IAAIjI,EAAO,CAC1BM,MAAM,2BAAMA,GAAP,IAAcE,mBACnB+H,MAAOlI,EAAO4F,KAAKsC,QA8CrB,IAAI1G,EAAQ,IAAIzB,EAAW4B,SAASqE,cAAc,WAAY,CAC5DlC,MAAOjE,EAAYiI,OAAO,CACxB5D,IAAKtE,EAAUuI,WAAWP,GAAUQ,MAAMzG,SAASqE,cAAc,aACjEqC,QAASnI,EAAa,CAACF,OAAO4H,IAAWU,OAAO1D,KAElD2D,UAAW,CACTpI,eADS,SACMkB,EAAMG,EAAMC,GAAU,OAAO,IAAIF,EAAaF,EAAMG,EAAMC,OAO7E+G,YAAchH,GD1GR,kBAAmBiH,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAA1B,GACL/B,QAAQ+B,MAAMA,EAAM2B,a","file":"static/js/main.036594bc.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import applyDevTools from \"prosemirror-dev-tools\";\nimport * as serviceWorker from './serviceWorker';\nimport {addListNodes} from \"prosemirror-schema-list\"\nconst {Plugin} = require(\"prosemirror-state\")\nconst {Decoration, DecorationSet} = require(\"prosemirror-view\")\n\nconst {Schema,DOMParser} = require(\"prosemirror-model\")\nconst {EditorState,NodeSelection} = require(\"prosemirror-state\")\nconst {EditorView} = require(\"prosemirror-view\")\nconst {schema,nodes} = require(\"prosemirror-schema-basic\")\nconst {exampleSetup} = require(\"prosemirror-example-setup\")\n\nconst resizableImage = {\n  inline: true,\n  attrs: {\n    src: {},\n    width: {default: \"5em\"},\n    alt: {default: null},\n    title: {default: null},\n    alignment: { default: \"center\" }\n  },\n  group: \"inline\",\n  draggable: true,\n  parseDOM: [{\n    priority: 51, // must be higher than the default image spec\n    tag: \"img[src][width]\", \n    getAttrs(dom) {\n      return {\n        src: dom.getAttribute(\"src\"),\n        title: dom.getAttribute(\"title\"),\n        alt: dom.getAttribute(\"alt\"),\n        width: dom.getAttribute(\"width\"),\n        alignment: dom.getAttribute(\"class\")===\"center\" ? \"center\" : (dom.getAttribute(\"class\")===\"right\" ? \"right\" : \"left\"),\n      }\n    }\n  }],\n  // TODO if we don't define toDom, something weird happens: dragging the image will not move it but clone it. Why?\n  toDOM(node) {\n    const attrs = {style: `width: ${node.attrs.width}`}\n    return [\"div\", { ...node.attrs, ...attrs }] \n  }\n}\n\nfunction getFontSize(element) {\n  return parseFloat(getComputedStyle(element).fontSize);\n}\n\nclass FootnoteView {\n  constructor(node, view, getPos) {    \n    const outer = document.createElement(\"div\")\n    outer.style.position = \"relative\"\n    outer.style.width = node.attrs.width\n    //outer.style.border = \"1px solid blue\"\n    outer.style.display = \"block\"\n    //outer.style.paddingRight = \"0.25em\"\n    outer.style.lineHeight = \"0\"; // necessary so the bottom right arrow is aligned nicely\n    outer.style.marginLeft='auto';\n    outer.style.marginRight='auto';\n    const img = document.createElement(\"img\")\n    img.setAttribute(\"src\", node.attrs.src)\n    img.style.width = \"100%\"\n    //img.style.border = \"1px solid red\"\n    \n    const handle = document.createElement(\"span\")\n    handle.style.position = \"absolute\"\n    handle.style.bottom = \"0px\"\n    handle.style.right = \"0px\"\n    handle.style.width = \"10px\"\n    handle.style.height = \"10px\"\n    handle.style.border = \"3px solid black\"\n    handle.style.borderTop = \"none\"\n    handle.style.borderLeft = \"none\"\n    handle.style.display = \"none\"\n    handle.style.cursor = \"nwse-resize\"\n    \n    handle.onmousedown = function(e) {\n      e.preventDefault()\n      \n      const startX = e.pageX;\n      const startY = e.pageY;\n      \n      const fontSize = getFontSize(outer)\n      \n      const startWidth = parseFloat(node.attrs.width.match(/(.+)em/)[1])\n            \n      const onMouseMove = (e) => {\n        const currentX = e.pageX;\n        const currentY = e.pageY;\n        \n        const diffInPx = currentX - startX\n        const diffInEm = diffInPx / fontSize\n                \n        outer.style.width = `${startWidth + diffInEm}em`\n      \n      }\n      \n      const onMouseUp = (e) => {  \n       \n        e.preventDefault()\n        \n        document.removeEventListener(\"mousemove\", onMouseMove)\n        document.removeEventListener(\"mouseup\", onMouseUp)\n        let saveThisPos = getPos()   \n        let transaction = view.state.tr.setNodeMarkup(getPos(), null, {src: node.attrs.src, width: outer.style.width} )\n        let resolvedPos = transaction.doc.resolve(saveThisPos)\n        let nodeSelection = new NodeSelection(resolvedPos)\n        transaction = transaction.setSelection(nodeSelection);\n        view.dispatch(transaction)\n      }\n      \n      document.addEventListener(\"mousemove\", onMouseMove)\n      document.addEventListener(\"mouseup\", onMouseUp)\n    }\n    \n    outer.appendChild(handle)\n    outer.appendChild(img)\n        \n    this.dom = outer\n    this.img = img\n    this.handle = handle\n  }\n  \n  selectNode() {\n    this.img.classList.add(\"ProseMirror-selectednode\")\n    \n    this.handle.style.display = \"\"\n  }\n\n  deselectNode() {\n    this.img.classList.remove(\"ProseMirror-selectednode\")\n    \n    this.handle.style.display = \"none\"\n  }\n}\n\n\nlet placeholderPlugin = new Plugin({\n  state: {\n    init() { return DecorationSet.empty },\n    apply(tr, set) {\n      // Adjust decoration positions to changes made by the transaction\n      set = set.map(tr.mapping, tr.doc)\n      // See if the transaction adds or removes any placeholders\n      let action = tr.getMeta(this)\n      console.log(\"act\",action)\n      if (action && action.add) {\n        let widget = document.createElement(\"placeholder\")\n        let deco = Decoration.widget(action.add.pos, widget, {id: action.add.id})\n        set = set.add(tr.doc, [deco])\n      } else if (action && action.remove) {\n        set = set.remove(set.find(null, null,\n                                  spec => spec.id == action.remove.id))\n      }\n      return set\n    }\n  },\n  props: {\n    decorations(state) { return this.getState(state) }\n  }\n})\n\nfunction findPlaceholder(state, id) {\n  let decos = placeholderPlugin.getState(state)\n  let found = decos.find(null, null, spec => spec.id == id)\n  return found.length ? found[0].from : null\n}\n\n\ndocument.querySelector(\"#image-upload\").addEventListener(\"change\", e => {\n  if (view.state.selection.$from.parent.inlineContent && e.target.files.length)\n    startImageUpload(view, e.target.files[0])\n  view.focus()\n})\n\ndocument.querySelector(\"#image-upload\").addEventListener(\"click\",e=>e.target.value='')\n\nconst mySchema = new Schema({\n  nodes: { ...nodes, resizableImage },\n  marks: schema.spec.marks\n})\n\nfunction startImageUpload(view, file) {\n  // A fresh object to act as the ID for this upload\n  let id = {}\n\n  // Replace the selection with a placeholder\n  let tr = view.state.tr\n  \n  if (!tr.selection.empty) tr.deleteSelection()\n  tr.setMeta(placeholderPlugin, {add: {id, pos: tr.selection.from }})\n  view.dispatch(tr)\n\n  uploadFile(file).then(url => {\n    let pos = findPlaceholder(view.state, id)\n    // If the content around the placeholder has been deleted, drop\n    // the image\n    if (pos == null) return\n    // Otherwise, insert it at the placeholder's position, and remove\n    // the placeholder\n    console.log(mySchema.nodes,\"nodes\")\n    view.dispatch(view.state.tr\n                  .replaceWith(pos, pos, mySchema.nodes.resizableImage.create({src: 'https://cdn.vox-cdn.com/thumbor/PSLYCBn2BjUj8Zdbf4BD6SMus-0=/0x0:1800x1179/920x613/filters:focal(676x269:964x557):format(webp)/cdn.vox-cdn.com/uploads/chorus_image/image/66741310/3zlqxf_copy.0.jpg'}))\n                  .setMeta(placeholderPlugin, {remove: {id}}))\n  }, () => {\n    // On failure, just clean up the placeholder\n    view.dispatch(tr.setMeta(placeholderPlugin, {remove: {id}}))\n  })\n}\n\n// This is just a dummy that loads the file and creates a data URL.\n// You could swap it out with a function that does an actual upload\n// and returns a regular URL for the uploaded file.\nfunction uploadFile(file) {\n  let reader = new FileReader\n  return new Promise((accept, fail) => {\n    reader.onload = () => accept(reader.result)\n    reader.onerror = () => fail(reader.error)\n    // Some extra delay to make the asynchronicity visible\n    setTimeout(() => reader.readAsDataURL(file), 1500)\n  })\n}\n\n\n\nlet view  = new EditorView(document.querySelector(\"#editor\"), {\n  state: EditorState.create({\n    doc: DOMParser.fromSchema(mySchema).parse(document.querySelector(\"#content\")),\n    plugins: exampleSetup({schema:mySchema}).concat(placeholderPlugin)\n  }),\n  nodeViews: {\n    resizableImage(node, view, getPos) { return new FootnoteView(node, view, getPos) }\n  }\n})\n\n\n\n\napplyDevTools(view);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}